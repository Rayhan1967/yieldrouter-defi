"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "(pages-dir-browser)/./src/lib/anchor-client.ts":
/*!**********************************!*\
  !*** ./src/lib/anchor-client.ts ***!
  \**********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   depositToVaultTransaction: () => (/* binding */ depositToVaultTransaction),\n/* harmony export */   getSimulationStatus: () => (/* binding */ getSimulationStatus),\n/* harmony export */   getUserPositionPDA: () => (/* binding */ getUserPositionPDA),\n/* harmony export */   getVaultPDA: () => (/* binding */ getVaultPDA),\n/* harmony export */   harvestRewardsTransaction: () => (/* binding */ harvestRewardsTransaction),\n/* harmony export */   initializeVaultTransaction: () => (/* binding */ initializeVaultTransaction),\n/* harmony export */   simulateAccountBalance: () => (/* binding */ simulateAccountBalance),\n/* harmony export */   simulateAccountExists: () => (/* binding */ simulateAccountExists),\n/* harmony export */   useYieldVaultProgram: () => (/* binding */ useYieldVaultProgram),\n/* harmony export */   withdrawFromVaultTransaction: () => (/* binding */ withdrawFromVaultTransaction)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(pages-dir-browser)/./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @solana/web3.js */ \"(pages-dir-browser)/./node_modules/@solana/web3.js/lib/index.browser.esm.js\");\n/* harmony import */ var _solana_wallet_adapter_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @solana/wallet-adapter-react */ \"(pages-dir-browser)/./node_modules/@solana/wallet-adapter-react/lib/esm/index.js\");\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"(pages-dir-browser)/./node_modules/buffer/index.js\")[\"Buffer\"];\n\n\n\nconst PROGRAM_ID = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__.PublicKey('6Jj2xKBWPb5yLCzJw1wEBZTn3pQCvqPRkx4KA7rJTF5g');\n// Mock Program Class untuk simulasi lengkap\nclass SimulatedProgram {\n    constructor(){\n        this.methods = {\n            initializeVault: (rewardRate)=>({\n                    accounts: (accounts)=>({\n                            rpc: async ()=>{\n                                console.log('ðŸŽ­ SIMULATION: Initialize Vault');\n                                console.log('- Reward Rate:', rewardRate.toString());\n                                console.log('- Admin:', accounts.admin.toString());\n                                console.log('- Mint:', accounts.mint.toString());\n                                console.log('- Vault PDA:', accounts.vault.toString());\n                                console.log('- Treasury:', accounts.treasury.toString());\n                                // Simulasi delay network\n                                await new Promise((resolve)=>setTimeout(resolve, 1500));\n                                // Generate mock transaction signature\n                                const mockTx = 'SIM_INIT_' + Math.random().toString(36).substr(2, 12);\n                                console.log('âœ… SIMULATION: Vault initialized, tx:', mockTx);\n                                return mockTx;\n                            }\n                        })\n                }),\n            deposit: (amount)=>({\n                    accounts: (accounts)=>({\n                            rpc: async ()=>{\n                                console.log('ðŸŽ­ SIMULATION: Deposit to Vault');\n                                console.log('- Amount:', amount.toString(), 'lamports');\n                                console.log('- Depositor:', accounts.depositor.toString());\n                                console.log('- Vault:', accounts.vault.toString());\n                                console.log('- User Position:', accounts.userPosition.toString());\n                                // Simulasi validasi\n                                if (amount.toNumber() < 10000000) {\n                                    throw new Error('SIMULATION: Amount too small (min 0.01 SOL)');\n                                }\n                                await new Promise((resolve)=>setTimeout(resolve, 2000));\n                                const mockTx = 'SIM_DEPOSIT_' + Math.random().toString(36).substr(2, 12);\n                                console.log('âœ… SIMULATION: Deposit successful, tx:', mockTx);\n                                return mockTx;\n                            }\n                        })\n                }),\n            withdraw: (amount)=>({\n                    accounts: (accounts)=>({\n                            rpc: async ()=>{\n                                console.log('ðŸŽ­ SIMULATION: Withdraw from Vault');\n                                console.log('- Amount:', amount.toString(), 'lamports');\n                                console.log('- Depositor:', accounts.depositor.toString());\n                                console.log('- Vault:', accounts.vault.toString());\n                                console.log('- User Position:', accounts.userPosition.toString());\n                                await new Promise((resolve)=>setTimeout(resolve, 1800));\n                                const mockTx = 'SIM_WITHDRAW_' + Math.random().toString(36).substr(2, 12);\n                                console.log('âœ… SIMULATION: Withdrawal successful, tx:', mockTx);\n                                return mockTx;\n                            }\n                        })\n                }),\n            harvest: ()=>({\n                    accounts: (accounts)=>({\n                            rpc: async ()=>{\n                                console.log('ðŸŽ­ SIMULATION: Harvest Rewards');\n                                console.log('- User:', accounts.user.toString());\n                                console.log('- Vault:', accounts.vault.toString());\n                                console.log('- User Position:', accounts.userPosition.toString());\n                                // Simulasi reward calculation\n                                const mockRewards = Math.random() * 1000000000; // Random rewards\n                                console.log('- Simulated Rewards:', mockRewards, 'lamports');\n                                await new Promise((resolve)=>setTimeout(resolve, 1600));\n                                const mockTx = 'SIM_HARVEST_' + Math.random().toString(36).substr(2, 12);\n                                console.log('âœ… SIMULATION: Harvest successful, tx:', mockTx);\n                                return mockTx;\n                            }\n                        })\n                }),\n            setRewardRate: (newRate)=>({\n                    accounts: (accounts)=>({\n                            rpc: async ()=>{\n                                console.log('ðŸŽ­ SIMULATION: Set Reward Rate');\n                                console.log('- New Rate:', newRate.toString());\n                                console.log('- Admin:', accounts.admin.toString());\n                                await new Promise((resolve)=>setTimeout(resolve, 1000));\n                                const mockTx = 'SIM_SET_RATE_' + Math.random().toString(36).substr(2, 12);\n                                console.log('âœ… SIMULATION: Rate updated, tx:', mockTx);\n                                return mockTx;\n                            }\n                        })\n                })\n        };\n        this.programId = PROGRAM_ID;\n    }\n}\n// Hook utama dengan full simulation support\nfunction useYieldVaultProgram() {\n    const { connection } = (0,_solana_wallet_adapter_react__WEBPACK_IMPORTED_MODULE_2__.useConnection)();\n    const wallet = (0,_solana_wallet_adapter_react__WEBPACK_IMPORTED_MODULE_2__.useAnchorWallet)();\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"useYieldVaultProgram.useMemo\": ()=>{\n            console.log('ðŸŽ­ SIMULATION MODE: useYieldVaultProgram initialized');\n            if (!connection || !wallet) {\n                return {\n                    program: null,\n                    provider: null,\n                    programId: PROGRAM_ID,\n                    connection: connection,\n                    simulation: true,\n                    status: 'not_ready'\n                };\n            }\n            // Mock provider\n            const mockProvider = {\n                connection: connection,\n                wallet: wallet,\n                publicKey: wallet.publicKey,\n                opts: {\n                    commitment: 'confirmed'\n                }\n            };\n            console.log('âœ… SIMULATION: Program ready with mock provider');\n            return {\n                program: new SimulatedProgram(),\n                provider: mockProvider,\n                programId: PROGRAM_ID,\n                connection: connection,\n                wallet: wallet,\n                simulation: true,\n                status: 'ready'\n            };\n        }\n    }[\"useYieldVaultProgram.useMemo\"], [\n        connection,\n        wallet\n    ]);\n}\n// PDA generation functions (real calculations)\nfunction getVaultPDA(mint) {\n    const [pda, bump] = _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__.PublicKey.findProgramAddressSync([\n        Buffer.from(\"vault\"),\n        mint.toBuffer()\n    ], PROGRAM_ID);\n    console.log('ðŸŽ­ SIMULATION: Generated Vault PDA:', pda.toString(), 'bump:', bump);\n    return [\n        pda,\n        bump\n    ];\n}\nfunction getUserPositionPDA(vault, user) {\n    const [pda, bump] = _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__.PublicKey.findProgramAddressSync([\n        Buffer.from(\"user\"),\n        vault.toBuffer(),\n        user.toBuffer()\n    ], PROGRAM_ID);\n    console.log('ðŸŽ­ SIMULATION: Generated User Position PDA:', pda.toString(), 'bump:', bump);\n    return [\n        pda,\n        bump\n    ];\n}\n// Additional simulation utilities\nfunction simulateAccountExists(publicKey) {\n    // Simulate 70% chance account exists\n    const exists = Math.random() > 0.3;\n    console.log('ðŸŽ­ SIMULATION: Account', publicKey.toString(), exists ? 'exists' : 'does not exist');\n    return exists;\n}\nfunction simulateAccountBalance(publicKey) {\n    // Generate random balance between 0-10 SOL\n    const balance = Math.random() * 10000000000; // lamports\n    console.log('ðŸŽ­ SIMULATION: Account balance for', publicKey.toString().slice(0, 8) + '...', balance / 1e9, 'SOL');\n    return balance;\n}\nfunction getSimulationStatus() {\n    return {\n        mode: 'simulation',\n        programId: PROGRAM_ID.toString(),\n        network: 'mock_devnet',\n        features: [\n            'vault_operations',\n            'pda_generation',\n            'mock_transactions'\n        ],\n        timestamp: new Date().toISOString()\n    };\n}\n// Legacy transaction builders (now return simulation data)\nconst initializeVaultTransaction = async (params)=>{\n    console.log('ðŸŽ­ SIMULATION: initializeVaultTransaction called with:', params);\n    return {\n        simulation: true,\n        status: 'ready'\n    };\n};\nconst depositToVaultTransaction = async (params)=>{\n    console.log('ðŸŽ­ SIMULATION: depositToVaultTransaction called with:', params);\n    return {\n        simulation: true,\n        status: 'ready'\n    };\n};\nconst withdrawFromVaultTransaction = async (params)=>{\n    console.log('ðŸŽ­ SIMULATION: withdrawFromVaultTransaction called with:', params);\n    return {\n        simulation: true,\n        status: 'ready'\n    };\n};\nconst harvestRewardsTransaction = async (params)=>{\n    console.log('ðŸŽ­ SIMULATION: harvestRewardsTransaction called with:', params);\n    return {\n        simulation: true,\n        status: 'ready'\n    };\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./src/lib/anchor-client.ts\n"));

/***/ })

});